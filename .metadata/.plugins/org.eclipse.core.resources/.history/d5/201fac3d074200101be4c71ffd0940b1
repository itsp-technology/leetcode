package day05;

public class BrothForce {

	public static void main(String[] args) {
		String s = "()";
		System.out.println(isValid(s));

	}
	public static boolean isValid(String s) {
		char[] stack = new char[s.length()];
		int top = -1;
		for(int i=0; i<s.length(); i++) {
			char c = s.charAt(i);
			if(c=='(' || c=='{'|| c=='[') {
				stack[++top]=c;
			}else {
				if(top==-1)return false;
				//pop the element from the stack
				char open = stack[top--];
				if((c == ')' && open != '(')
						|| (c == '}' && open != '{')
						|| (c== ']' && open != '['));
				return false;
			}
		}
		return top==-1;
	}
	
	 public static boolean isValidBrackets(String expression) {
	        // Create a character array to simulate stack (max size = expression length)
	        char[] manualStack = new char[expression.length()];
	        int pointer = -1; // Stack top pointer (-1 means empty)

	        // Iterate over each character in the string
	        for (int i = 0; i < expression.length(); i++) {
	            char current = expression.charAt(i);

	            // If it's an opening bracket, push to the stack
	            if (current == '(' || current == '{' || current == '[') {
	                manualStack[++pointer] = current; // simulate stack push
	            } else {
	                // If stack is empty and we found a closing bracket, it's invalid
	                if (pointer == -1) return false;

	                char lastOpen = manualStack[pointer--]; // simulate stack pop

	                // Check if current closing bracket matches the last opened one
	                if ((current == ')' && lastOpen != '(') ||
	                    (current == '}' && lastOpen != '{') ||
	                    (current == ']' && lastOpen != '[')) {
	                    return false;
	                }
	            }
	        }

	        // If pointer is back to -1, all brackets were matched correctly
	        return pointer == -1;
	    }

}
